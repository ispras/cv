name: Deploy

on: [push, workflow_dispatch]

jobs:
  build-launcher:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: [ "3.8" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Configure system for container mode
        run: |
          echo "Enabling unprivileged user namespaces..."
          sudo sysctl kernel.unprivileged_userns_clone=1
          sudo sysctl -w user.max_user_namespaces=10000

      - name: Install system dependencies
        run: |
          echo "Installing required packages..."
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk
          echo "Configuring Java 17 as default..."
          sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-17-openjdk-amd64/bin/java 1
          sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac 1
          sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
          sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt

      - name: Build and deploy Continuous Verification Framework
        run: |
          echo "Building and deploying CV..."
          make install -j"$(nproc)" DEPLOY_DIR=build
          make install-cif-compiled -j"$(nproc)" DEPLOY_DIR=build

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          cp -r docs/examples/sources/ build/
          cd build
          python3 ./scripts/launch.py -c configs/it.json

          echo "Verifying results..."
          grep "it;smg;no_memory_leak_caller;TRUE;SUCCESS" results/report_launches_it_*.csv || exit 1
          grep "it;smg;memory_leak_caller;FALSE;SUCCESS" results/report_launches_it_*.csv || exit 1
  build-visualizer:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install -r requirements.txt
    - name: Deployment of Benchmark Visualizer
      run: |
        DEPLOY_DIR=build make install-benchmark-visualizer -j$(nproc)
        cd build
        python3 ./scripts/visualize_witnesses.py -r results/ -d ../docs/examples/witnesses/violation/
        python3 ./scripts/visualize_witnesses.py -r results/ -d ../docs/examples/witnesses/correctness/
  build-mea:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install -r requirements.txt
    - name: Deployment of MEA
      run: |
        DEPLOY_DIR=build make install-mea -j$(nproc)
        cd build
        python3 ./scripts/filter.py -d ../docs/examples/witnesses/violation/
  build-frama-c-cil:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Deployment of Frama-C CIL
      run: |
        DEPLOY_DIR=build make install-frama-c-cil -j$(nproc)
